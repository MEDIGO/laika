// Code generated by go-bindata.
// sources:
// store/schema/1_init.sql
// store/schema/2.sql
// store/schema/3.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _storeSchema1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x94\xcf\x4e\x83\x40\x10\xc6\xef\xfb\x14\x73\x84\x68\x2f\x26\x3d\xf5\xb4\xa5\x53\xdd\x48\x97\xba\x5d\x8c\x3d\xb1\xab\x5d\x95\x44\x68\x03\x5b\x8d\x6f\x6f\x40\x28\x54\xa1\x41\x4f\xca\x71\xe7\xf7\xcd\x9f\x6f\x26\x8c\x46\x70\x96\xc4\x4f\x99\xb6\x06\xc2\x1d\x21\x9e\x40\x2a\x11\x24\x9d\xfa\x08\x6c\x0e\x3c\x90\x80\x77\x6c\x25\x57\xa0\x1e\x8d\xb6\xfb\xcc\x28\x87\x00\xa8\x78\xa3\xa0\xfe\x18\x97\x25\xc8\x43\xdf\x07\x1a\xca\x20\x62\xdc\x13\xb8\x40\x2e\xcf\x0b\x36\xd5\x89\xa9\xe9\x5b\x2a\xbc\x2b\x2a\x9c\x8b\xf1\xd8\x3d\x88\x4a\xea\x21\x33\xda\x9a\x4d\xa4\xad\x82\x59\xd1\x44\x13\x25\x00\x4b\xc1\x16\x54\xac\xe1\x1a\xd7\xe0\xc4\x1b\xb7\x90\x84\x9c\xdd\x84\x08\x4e\x91\xdf\x25\xee\xe4\x74\xfb\x26\x7d\x8d\xb3\x6d\x9a\x98\xd4\x2a\xf8\xa7\x33\x54\x2b\x88\x72\xab\xed\x3e\xef\x18\x63\xc8\x28\x75\x92\x5a\xd7\xe6\x4b\xa0\xe5\x54\x09\x75\x00\xfa\xfe\xc5\x34\x65\xa7\x41\xe0\x23\xe5\xfd\x5e\x14\xdf\x30\x3f\xe6\x81\x40\x76\xc9\x3f\xdf\x9a\x4e\x5d\x10\x38\x47\x81\xdc\xc3\x15\x54\xcf\x9d\x92\xe3\xde\x8f\x64\xad\x50\x21\xfd\xa1\xd9\xd1\x73\x9c\xdb\x6d\xf6\xde\x63\xfa\x2f\x7c\x1f\x62\x7d\x17\xf3\xa5\xaf\x41\x1b\x1a\xba\xa4\xef\x7b\x02\x50\x36\x4e\x4c\x6e\x75\xb2\x6b\xd2\xfd\xb5\x65\xf6\x56\x3b\x98\xd4\x55\xb4\x8a\x1e\xae\xa1\xfd\x37\x9c\x6d\xdf\x52\x42\x66\x22\x58\x36\xd7\x51\x5d\x46\xf7\x61\x4c\x86\xc0\x3d\x50\x6b\x9a\xd3\x69\x26\xe4\x23\x00\x00\xff\xff\xfe\x5e\xa3\xad\xb2\x05\x00\x00")

func storeSchema1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_storeSchema1_initSql,
		"store/schema/1_init.sql",
	)
}

func storeSchema1_initSql() (*asset, error) {
	bytes, err := storeSchema1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "store/schema/1_init.sql", size: 1458, mode: os.FileMode(420), modTime: time.Unix(1481922519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storeSchema2Sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xcc\x31\xb2\xc2\x20\x10\x06\xe0\x7e\x4f\xf1\xf7\x6f\x72\x82\x54\x3c\x97\x6e\x05\x27\x03\x75\xa0\x40\xa5\xc0\x64\x60\x33\x8e\xb7\xb7\xb5\xb0\xf0\x02\xdf\x34\xe1\xaf\xd5\x5b\xcf\x5a\x10\x77\x22\x23\xc1\x2e\x08\xe6\x5f\x2c\xd2\xb5\x64\x3d\x7a\x59\x87\x66\x3d\xc6\x7a\xaf\x43\xb7\xfe\x4a\xe0\xc5\x5f\x70\xf2\x12\xcf\x0e\x49\x6b\x2b\x43\x73\xdb\xd3\x4c\xf4\xc9\xf1\xf6\x7c\xfc\x08\x1a\xe6\x2f\x1e\xd8\x04\x0b\xe7\x03\x5c\x14\x99\xe9\x1d\x00\x00\xff\xff\x64\xa0\xa3\x17\xac\x00\x00\x00")

func storeSchema2SqlBytes() ([]byte, error) {
	return bindataRead(
		_storeSchema2Sql,
		"store/schema/2.sql",
	)
}

func storeSchema2Sql() (*asset, error) {
	bytes, err := storeSchema2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "store/schema/2.sql", size: 172, mode: os.FileMode(420), modTime: time.Unix(1481922519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storeSchema3Sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xd0\xb1\x4e\xc3\x30\x14\x85\xe1\xfd\x3e\xc5\x19\x13\xd1\x2e\x48\x9d\x3a\x99\xe4\x22\x2c\x52\xa7\xb8\x36\xa2\x53\x6c\x61\x8b\x66\x68\x1b\x25\xa9\xfa\xfa\xc8\x51\x81\xc0\x80\xe7\xef\xb7\xae\xce\x72\x89\xbb\x63\xfb\xd1\xfb\x31\xc2\x76\x44\x85\x66\x61\x18\x46\x3c\x54\x0c\xf9\x08\x55\x1b\xf0\x9b\xdc\x99\x1d\xdc\x65\x88\xbd\xcb\x08\x70\x6d\x70\x98\x3d\xa9\xcc\x04\x95\xad\x2a\x08\x6b\xea\x46\xaa\x42\xf3\x86\x95\x59\x24\x9e\xc2\x93\x3f\xc6\x5b\xf4\x2a\x74\xf1\x24\x74\x76\xbf\x5a\xe5\xdf\xdd\x04\x3b\x3f\x0c\xd7\x73\x1f\x9a\x83\x1f\x0e\xee\x1f\xf8\xde\x47\x3f\xc6\xd0\xf8\x71\xfa\xb3\x4c\x37\xff\x02\x97\x2e\xfc\x05\x0b\x22\x60\xab\xe5\x46\xe8\x3d\x9e\x79\x8f\xac\x0d\x79\xc2\x56\xc9\x17\xcb\xc8\xbe\xce\xcc\x29\x5f\x13\xcd\x97\x29\xcf\xd7\x13\x51\xa9\xeb\xed\xcf\x32\xb7\x55\x52\xb4\xa6\xcf\x00\x00\x00\xff\xff\xfa\xdb\x6f\x5e\x47\x01\x00\x00")

func storeSchema3SqlBytes() ([]byte, error) {
	return bindataRead(
		_storeSchema3Sql,
		"store/schema/3.sql",
	)
}

func storeSchema3Sql() (*asset, error) {
	bytes, err := storeSchema3SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "store/schema/3.sql", size: 327, mode: os.FileMode(420), modTime: time.Unix(1481922519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"store/schema/1_init.sql": storeSchema1_initSql,
	"store/schema/2.sql": storeSchema2Sql,
	"store/schema/3.sql": storeSchema3Sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"store": &bintree{nil, map[string]*bintree{
		"schema": &bintree{nil, map[string]*bintree{
			"1_init.sql": &bintree{storeSchema1_initSql, map[string]*bintree{}},
			"2.sql": &bintree{storeSchema2Sql, map[string]*bintree{}},
			"3.sql": &bintree{storeSchema3Sql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

